<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java基础 on Haijd&#39;s Blog</title>
    <link>/tags/java%E5%9F%BA%E7%A1%80/</link>
    <description>Recent content in Java基础 on Haijd&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 10 Dec 2017 19:23:27 +0800</lastBuildDate>
    
	<atom:link href="/tags/java%E5%9F%BA%E7%A1%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Java compareTo字符串比较函数</title>
      <link>/java/java-compareto%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 10 Dec 2017 19:23:27 +0800</pubDate>
      
      <guid>/java/java-compareto%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83%E5%87%BD%E6%95%B0/</guid>
      <description>1. 调用方式： int compareTo(String) compareTo函数可以直接使用String类型的变量调用，参数是需要比较的另一个字符串，返回值是一个int类型。
2. 关于返回值的三种判断 s1.compareTo(s2)//s1是原字符串，s2是参数字符串 返回值计算方式：原减参
 返回0  两个字符串相同  返回正负整数：
 原字符串中的所有字符，按照顺序都包含在参数字符串中时，返回的是，原字符串字符数减去参数字符串字符数。  1 2 3 4 5  String s1 = &amp;#34;Java&amp;#34;; String s2 = &amp;#34;JavaScript&amp;#34;; System.Out.Println(s1.compareTo(s2)); //输出-6 //解读：因为s1是原字符串，并且其中的4个字符全部在参数字符串s2中可以找到， // 所以在使用compareTo函数的时候，就是源字符串的长度4减去参数字符串的长度10等于-6    原字符串中有1个或以上的字符并不在参数字符串中时，返回的是，两个字符串中不相同的第一个字符的ASCII码(十进制表示)相减的值。  1 2 3 4 5 6  String s1 = &amp;#34;Javac&amp;#34;; String s2 = &amp;#34;JavaScript&amp;#34;; System.Out.Println(s1.compareTo(s2)); //输出16 // 解读：字符串s1中的第五个字符“c”对应的是s2中的“S”， // 所以两个是不包含的关系，使用ASCII码的十进制表示相减。 // “c”的ASCII码为99，“S”的ASCII码为83，利用“原减参”的规则，99-83=16     使用人话说： 我找你想比较一下我们俩拥有的水果是不是一模一样的，我有4个苹果，你也有4个苹果，但是你还有3个梨，这时候，我只能表示我比你少3个数量的水果。 过了一会儿，我从家里拿来一个橘子，加在一起和你比较了，这时候，橘子是只有我有，而你没有，这时候我才不管你有梨我没梨了，我就非得用这个橘子和你的梨比较价格。</description>
    </item>
    
    <item>
      <title>Java基础：Map接口</title>
      <link>/java/java%E5%9F%BA%E7%A1%80map%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Tue, 20 Jun 2017 22:13:42 +0800</pubDate>
      
      <guid>/java/java%E5%9F%BA%E7%A1%80map%E6%8E%A5%E5%8F%A3/</guid>
      <description>1. Map接口  Map接口概述:  Map中存储元素是成对存在的，每一个元素都包含键和值(key、value)。 Map集合不能批量添加，只能执行单个添加操作。 Map集合中的key是不能重复的，但是value可以重复，每个键只能对应一个值。 Map下的主要实现类：HashMap、LinkedHashMap   1.1. Map接口中的常用方法  public V put(K key, V value) ：存储键值对 public void putAll(Map&amp;lt;? extends K, ? extends V&amp;gt; m) :添加一个相同类型的Map(注意限定符约束) 查看源码可以知道，无论是put还是putAll最终调用的都是putVal这个方法(putAll也是循环调用的该方法)  1 2 3 4 5 6  //可以看到第一个参数是一个hash final V putVal(int hash, K key, V value, boolean onlyIfAbsent,boolean evict){} //从这里可以看出来，HashMap在存储的时候会对key进行hash操作，在putVal方法中对hash进行判断，用来判重 public V put(K key, V value) { return putVal(hash(key), key, value, false, true); }    public V get(Object key) ：根据key获取value public V getOrDefault(Object key, V defaultValue) ：根据key获取value，并且传递一个默认的value，当该key的时候，就返回这个传过来的默认的value，这是JDK8中新扩展的方法。  1 2 3 4 5 6 7 8 9 10  public V get(Object key) { Node&amp;lt;K,V&amp;gt; e; return (e = getNode(hash(key), key)) == null ?</description>
    </item>
    
    <item>
      <title>Java基础：Set接口</title>
      <link>/java/java%E5%9F%BA%E7%A1%80set%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Fri, 16 Jun 2017 15:39:46 +0000</pubDate>
      
      <guid>/java/java%E5%9F%BA%E7%A1%80set%E6%8E%A5%E5%8F%A3/</guid>
      <description>1. Set接口  Set接口的特点  Set接口是不能包含重复元素的集合。 Set集合取出元素的方式可以采用：迭代器、foreach。   2. 实现类HashSet的存储和迭代  HashSet (哈希表)无序集合,存储和取出的顺序不同,没有索引,不存储重复元素 内部使用的map存储的，添加操作在内部实现是当作map的key存储的，所以不会出现重复元素。   1 2 3 4 5 6 7 8 9 10 11 12 13 14  public static void main(String[] args){ Set&amp;lt;String&amp;gt; set=new HashSet&amp;lt;String&amp;gt;(); set.add(&amp;#34;a1&amp;#34;); set.add(&amp;#34;a2&amp;#34;); set.add(&amp;#34;a3&amp;#34;); set.add(&amp;#34;a3&amp;#34;); //相同数据会存储失败  Iterator&amp;lt;String&amp;gt; iterator=set.iterator(); while (iterator.hasNext()) { System.out.println(iterator.next()); //输出：a1 a2 a3  } for (String str : set) { System.out.println(str); //输出：a1 a2 a3  } }   3.</description>
    </item>
    
    <item>
      <title>Java基础：List接口</title>
      <link>/java/java%E5%9F%BA%E7%A1%80list%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Wed, 14 Jun 2017 22:00:58 +0800</pubDate>
      
      <guid>/java/java%E5%9F%BA%E7%A1%80list%E6%8E%A5%E5%8F%A3/</guid>
      <description>&lt;h1 id=&#34;1-list接口&#34;&gt;1. List接口&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;List接口的特点:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;它是一个元素存取有序的集合&lt;/li&gt;
&lt;li&gt;它是一个带有索引的集合，通过索引就可以精确的操作集合中的元素。&lt;/li&gt;
&lt;li&gt;集合中可以有重复的元素。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;List接口子类有：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ArrayList&lt;/code&gt;集合&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LinkedList&lt;/code&gt;集合&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2-list接口的方法&#34;&gt;2. List接口的方法&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;boolean add(E e);&lt;/code&gt; :将指定的元素添加到集合的末尾，返回是否添加成功&lt;/li&gt;
&lt;li&gt;&lt;code&gt;void add(int index, E element);&lt;/code&gt;  :将指定元素添加到指定的索引处&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;10
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(){&lt;/span&gt;
    List&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;&lt;/span&gt; list &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; ArrayList&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;();&lt;/span&gt;
    list&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;a1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
    list&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;a2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
    list&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;a3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
    list&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;a4&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
    System&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;list&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;//输出：[a1, a2, a3, a4]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    list&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;1&lt;span style=&#34;color:#ff79c6&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;aa&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
    System&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;list&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;//输出：[a1, aa, a2, a3, a4]
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Java基础：泛型</title>
      <link>/java/java%E5%9F%BA%E7%A1%80%E6%B3%9B%E5%9E%8B/</link>
      <pubDate>Thu, 08 Jun 2017 22:37:01 +0800</pubDate>
      
      <guid>/java/java%E5%9F%BA%E7%A1%80%E6%B3%9B%E5%9E%8B/</guid>
      <description>&lt;h1 id=&#34;1-泛型概述&#34;&gt;1. 泛型概述&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Java 泛型（generics）是 JDK 5 中引入的一个新特性, 泛型提供了编译时类型安全检测机制，该机制允许程序员在编译时检测到非法的类型。&lt;/li&gt;
&lt;li&gt;泛型的本质就是参数化类型，也就是说把数据类型作为一个参数传递。例如：&lt;code&gt;private class Itr implements Iterator&amp;lt;E&amp;gt;{...}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2-java中的伪泛型&#34;&gt;2. Java中的伪泛型&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;泛型只在编译时存在，编译之后的class文件中并不存在泛型。

&lt;ul&gt;
&lt;li&gt;例如:ArrayList&lt;String&gt; al=new ArrayList&lt;String&gt;();&lt;/li&gt;
&lt;li&gt;编译后:ArrayList al = new ArrayList();&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;泛型只是在编译期进行的类型安全检查机制，避免程序可能发生的错误。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Java基础：Iterator迭代器</title>
      <link>/java/java%E5%9F%BA%E7%A1%80iterator%E8%BF%AD%E4%BB%A3%E5%99%A8/</link>
      <pubDate>Sat, 03 Jun 2017 19:43:42 +0800</pubDate>
      
      <guid>/java/java%E5%9F%BA%E7%A1%80iterator%E8%BF%AD%E4%BB%A3%E5%99%A8/</guid>
      <description>&lt;h1 id=&#34;1-迭代器的概述&#34;&gt;1. 迭代器的概述&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;迭代器概述:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Java中有很多种集合，这些集合在存储元素的时候，存储的方式都是不尽相同的，那么对应的我们在取出元素的时候也不相同，为每一种集合设计一个取出方式显然是不合理的，所以就出现了一种屏蔽集合间差异的读取元素的方式，就是迭代器。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Collection集合元素的通用获取方式：在取元素之前先要判断集合中有没有元素，如果有，就把这个元素取出来，然后继续判断，如果有就继续取。一直把集合中的所有元素全部取出。这种取出方式专业术语称为迭代。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;每种集合的底层的数据结构不同,例如ArrayList是数组,LinkedList底层是链表,但是无论使用那种集合,我们都会有判断是否有元素
以及取出里面的元素的动作,那么Java为我们提供一个迭代器定义了统一的判断元素和取元素的方法 。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Java基础：集合</title>
      <link>/java/java%E5%9F%BA%E7%A1%80%E9%9B%86%E5%90%88/</link>
      <pubDate>Thu, 01 Jun 2017 20:28:49 +0800</pubDate>
      
      <guid>/java/java%E5%9F%BA%E7%A1%80%E9%9B%86%E5%90%88/</guid>
      <description>&lt;h1 id=&#34;1-集合概述&#34;&gt;1. 集合概述&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;集合，集合是java中提供的一种容器，可以用来存储多个数据

&lt;ul&gt;
&lt;li&gt;数组的长度是固定的。集合的长度是可变的&lt;/li&gt;
&lt;li&gt;集合中存储的元素必须是引用类型数据(基本类型可以使用包装类，Java内部自动帮我们做了拆装箱操作)&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Java基础：数值类型操作</title>
      <link>/java/java%E5%9F%BA%E7%A1%80%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Tue, 30 May 2017 23:51:32 +0800</pubDate>
      
      <guid>/java/java%E5%9F%BA%E7%A1%80%E6%95%B0%E5%80%BC%E7%B1%BB%E5%9E%8B%E6%93%8D%E4%BD%9C/</guid>
      <description>&lt;h1 id=&#34;1-math类的方法&#34;&gt;1. Math类的方法&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public static double sqrt(double a)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;返回参数的平方根&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;4
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(){&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd&#34;&gt;double&lt;/span&gt; d &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; Math&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;sqrt&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;7&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
   	System&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;d&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;  &lt;span style=&#34;color:#6272a4&#34;&gt;//输出：2.6457513110645907
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Java基础：System类</title>
      <link>/java/java%E5%9F%BA%E7%A1%80system%E7%B1%BB/</link>
      <pubDate>Sun, 28 May 2017 21:48:41 +0800</pubDate>
      
      <guid>/java/java%E5%9F%BA%E7%A1%80system%E7%B1%BB/</guid>
      <description>&lt;h1 id=&#34;1-system类方法currenttimemillis&#34;&gt;1. System类方法currentTimeMillis&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;System类方法&lt;code&gt;currentTimeMillis()&lt;/code&gt;:获取系统当前的毫秒值&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;13
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;/*
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;*  获取系统当前毫秒值
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;*  static long currentTimeMillis()
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;*  对程序执行时间测试
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;*/&lt;/span&gt;
&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;function&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(){&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; start &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; System&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;currentTimeMillis&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//当前时间x-1970年1月1日零时零分零秒
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#ff79c6&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; 0 &lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;&lt;/span&gt; 10000&lt;span style=&#34;color:#ff79c6&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#ff79c6&#34;&gt;++){&lt;/span&gt;
      	System&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;i&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#8be9fd&#34;&gt;long&lt;/span&gt; end &lt;span style=&#34;color:#ff79c6&#34;&gt;=&lt;/span&gt; System&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;currentTimeMillis&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;();&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//当前时间y-1970年1月1日零时零分零秒
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    System&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;end &lt;span style=&#34;color:#ff79c6&#34;&gt;-&lt;/span&gt; start&lt;span style=&#34;color:#ff79c6&#34;&gt;);&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//当前时间y-当前时间x 
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Java基础：JAVA基本类型和包装类</title>
      <link>/java/java%E5%9F%BA%E7%A1%80%E5%8C%85%E8%A3%85%E7%B1%BB/</link>
      <pubDate>Sat, 27 May 2017 19:45:09 +0800</pubDate>
      
      <guid>/java/java%E5%9F%BA%E7%A1%80%E5%8C%85%E8%A3%85%E7%B1%BB/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;转载自：&lt;a href=&#34;http://alexyyek.github.io/2014/12/29/wrapperClass/&#34;&gt;http://alexyyek.github.io/2014/12/29/wrapperClass/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;1-java的包装类&#34;&gt;1. JAVA的包装类&lt;/h1&gt;

&lt;blockquote&gt;
&lt;p&gt;Java语言是一个面向对象的语言，但是Java中的基本数据类型却是不面向对象的，这在实际使用时存在很多的不便，为了解决这个不足，在设计类时为每个基本数据类型设计了一个对应的类进行代表，这样八个和基本数据类型对应的类统称为包装类(Wrapper Class)，有些地方也翻译为外覆类或数据类型类，如下表所示：&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Java基础：Data&amp;Calendar</title>
      <link>/java/java%E5%9F%BA%E7%A1%80data-calendar/</link>
      <pubDate>Thu, 25 May 2017 19:18:10 +0800</pubDate>
      
      <guid>/java/java%E5%9F%BA%E7%A1%80data-calendar/</guid>
      <description>&lt;h1 id=&#34;1-date类的构造方法&#34;&gt;1. Date类的构造方法&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Date类的构造方法

&lt;ul&gt;
&lt;li&gt;空参构造

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public Date()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;带参构造

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public Date(long times)&lt;/code&gt;
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2-date类的get和set方法&#34;&gt;2. Date类的get和set方法&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Date类的get和set方法

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;public long getTime()&lt;/code&gt;&lt;br /&gt;

&lt;ul&gt;
&lt;li&gt;将当前的日期对象，转为对应的毫秒值&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;public void setTime(long times);&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;根据给定的毫秒值，生成对应的日期对象&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Java基础：正则表达式</title>
      <link>/java/java%E5%9F%BA%E7%A1%80%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</link>
      <pubDate>Mon, 22 May 2017 20:10:45 +0800</pubDate>
      
      <guid>/java/java%E5%9F%BA%E7%A1%80%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</guid>
      <description>&lt;h1 id=&#34;1-正则表达式的概念和作用&#34;&gt;1. 正则表达式的概念和作用&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;正则表达式的概述

&lt;ul&gt;
&lt;li&gt;正则表达式也是一个字符串，用来定义匹配规则，在Pattern类中有简单的规则定义。可以结合字符串类的方法使用。&lt;/li&gt;
&lt;li&gt;正则表达式是具有特殊含义的字符串。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;正则表达式的作用

&lt;ul&gt;
&lt;li&gt;比如注册账户,需要输入用户名和密码,一般会对其限制长度,这个限制长度的事情就是正则表达式做的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Java基础：String类</title>
      <link>/java/java%E5%9F%BA%E7%A1%80string%E7%B1%BB/</link>
      <pubDate>Sun, 21 May 2017 22:13:33 +0800</pubDate>
      
      <guid>/java/java%E5%9F%BA%E7%A1%80string%E7%B1%BB/</guid>
      <description>&lt;h1 id=&#34;1-string类的概念和不变性&#34;&gt;1. String类的概念和不变性&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;String类的概念和不变性

&lt;ul&gt;
&lt;li&gt;String类

&lt;ul&gt;
&lt;li&gt;API中的String类的描述，发现String 类代表字符串&lt;/li&gt;
&lt;li&gt;Java 程序中的所有字符串字面值（如 &amp;ldquo;abc&amp;rdquo; ）都作为此类的实例实现。&lt;/li&gt;
&lt;li&gt;字符串是常量,在创建之后不能更改&lt;/li&gt;
&lt;li&gt;其实就是说一旦这个字符串确定了，那么就会在内存区域中就生成了这个字符串。字符串本身不能改变，但str变量中记录的地址值是可以改变的。&lt;/li&gt;
&lt;li&gt;源码分析,String类底层采用的是字符数组:&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Java基础：StringBuffer&amp;StringBuilder</title>
      <link>/java/java%E5%9F%BA%E7%A1%80stringbuffer-stringbuilder/</link>
      <pubDate>Sun, 21 May 2017 21:02:18 +0800</pubDate>
      
      <guid>/java/java%E5%9F%BA%E7%A1%80stringbuffer-stringbuilder/</guid>
      <description>&lt;h1 id=&#34;1-stringbuffer特点可变字符数组&#34;&gt;1. StringBuffer特点可变字符数组&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StringBuffe&lt;/code&gt;r类概述

&lt;ul&gt;
&lt;li&gt;线程安全的可变字符序列&lt;/li&gt;
&lt;li&gt;底层采用字符数组实现,初始容量为16&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StringBuffer&lt;/code&gt;和&lt;code&gt;String&lt;/code&gt;的区别

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;String&lt;/code&gt;是一个不可变的字符序列&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StringBuffer&lt;/code&gt;是一个可变的字符序列&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Java基础：Object类</title>
      <link>/java/java%E5%9F%BA%E7%A1%80object%E7%B1%BB/</link>
      <pubDate>Fri, 12 May 2017 21:56:17 +0800</pubDate>
      
      <guid>/java/java%E5%9F%BA%E7%A1%80object%E7%B1%BB/</guid>
      <description>&lt;h1 id=&#34;1-object类概述&#34;&gt;1. Object类概述&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Object类概述

&lt;ul&gt;
&lt;li&gt;类层次结构的根类&lt;/li&gt;
&lt;li&gt;所有类都直接或者间接的继承自该类&lt;/li&gt;
&lt;li&gt;Object中描述的所有方法子类都可以使用&lt;/li&gt;
&lt;li&gt;所有类在创建对象的时候，最终找的父类就是Object。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2-equals方法比较内存地址&#34;&gt;2. equals方法比较内存地址&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Object类中的equals方法

&lt;ul&gt;
&lt;li&gt;用于比较两个对象是否相同，Object类中就是使用两个对象的内存地址在比较。&lt;/li&gt;
&lt;li&gt;Object类中的&lt;code&gt;equals&lt;/code&gt;方法内部使用的就是&lt;code&gt;==&lt;/code&gt;比较运算符。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Java基础：修饰符</title>
      <link>/java/java%E5%9F%BA%E7%A1%80%E4%BF%AE%E9%A5%B0%E7%AC%A6/</link>
      <pubDate>Thu, 11 May 2017 13:04:09 +0800</pubDate>
      
      <guid>/java/java%E5%9F%BA%E7%A1%80%E4%BF%AE%E9%A5%B0%E7%AC%A6/</guid>
      <description>&lt;h1 id=&#34;1-权限修饰符&#34;&gt;1. 权限修饰符&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;权限修饰符有哪些

&lt;ul&gt;
&lt;li&gt;在Java中提供了四种访问权限，使用不同的访问权限时，被修饰的内容会有不同的访问权限&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;范围&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;public&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;protected&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;default&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;private&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;同一类中&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;✔&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;✔&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;✔&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;✔&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;同一包中(子类与无关类)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;✔&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;✔&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;✔&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;不同包的子类&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;✔&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;✔&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;不同包中的无关类&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;✔&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description>
    </item>
    
    <item>
      <title>Java基础：final&amp;匿名类&amp;代码块</title>
      <link>/java/java%E5%9F%BA%E7%A1%80final%E5%8C%BF%E5%90%8D%E7%B1%BB%E4%BB%A3%E7%A0%81%E5%9D%97/</link>
      <pubDate>Sun, 23 Apr 2017 07:23:27 +0000</pubDate>
      
      <guid>/java/java%E5%9F%BA%E7%A1%80final%E5%8C%BF%E5%90%8D%E7%B1%BB%E4%BB%A3%E7%A0%81%E5%9D%97/</guid>
      <description># final关键字
 概述
 继承的出现提高了代码的复用性，并方便开发。但随之也有问题，有些类在描述完之后，不想被继承，或者有些类中的部分方法功能是固定的，不想让子类重写。可是当子类继承了这些特殊类之后，就可以对其中的方法进行重写，那怎么解决呢？ 要解决上述的这些问题，需要使用到一个关键字final，final的意思为最终，不可变。 final是个修饰符，它可以用来修饰类，类的成员，以及局部变量。    final修饰类  final 修饰类
 final修饰类不可以被继承，但是可以继承其他类。  1 2 3  class Obj {} final class Parent extends Obj{} //可以继承Obj类 class Sub extends Parent{} //不能继承Parent类    final修饰方法  final修饰方法
 final修饰的方法不可以被覆盖,但父类中没有被final修饰方法，子类覆盖后可以加final。  1 2 3 4 5 6 7 8 9  class Parent { // final修饰的方法，不可以被覆盖，但可以继承使用 public final void method1(){} public void method2(){} } class Sub extends Parent { //重写method2方法 public final void method2(){} }    final修饰局部变量  修饰基本数据类型变量</description>
    </item>
    
    <item>
      <title>Java基础：this&amp;super关键字</title>
      <link>/java/java%E5%9F%BA%E7%A1%80thissuper%E5%85%B3%E9%94%AE%E5%AD%97/</link>
      <pubDate>Mon, 10 Apr 2017 19:23:27 +0800</pubDate>
      
      <guid>/java/java%E5%9F%BA%E7%A1%80thissuper%E5%85%B3%E9%94%AE%E5%AD%97/</guid>
      <description>&lt;h1 id=&#34;1-为什么要有构造方法&#34;&gt;1. 为什么要有构造方法？&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;构造方法的作用:

&lt;ul&gt;
&lt;li&gt;在new的同时给成员变量赋值,给对象属性进行初始化。
&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;2-构造方法的定义和运行特点&#34;&gt;2. 构造方法的定义和运行特点&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;构造方法定义
构造方法的格式：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;修饰符 &lt;span style=&#34;color:#50fa7b&#34;&gt;构造方法名&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;(&lt;/span&gt;参数列表&lt;span style=&#34;color:#ff79c6&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>