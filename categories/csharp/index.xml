<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Csharp on Haijd&#39;s Blog</title>
    <link>/categories/csharp/</link>
    <description>Recent content in Csharp on Haijd&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 19 Feb 2019 21:29:51 +0800</lastBuildDate>
    
	<atom:link href="/categories/csharp/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>初探System.Threading.Channels</title>
      <link>/csharp/%E5%88%9D%E6%8E%A2system.threading.channels/</link>
      <pubDate>Tue, 19 Feb 2019 21:29:51 +0800</pubDate>
      
      <guid>/csharp/%E5%88%9D%E6%8E%A2system.threading.channels/</guid>
      <description>最近再次看了一下C#并发编程的一些资料，对其中的Rx产生了一些兴趣和疑问，同时想起对比一下Go语言的并发特性，所以查阅了一些资料，今天谈谈一个新的并发操作类库System.Threading.Channels。
1. 简介 System.Threading.Channels是.Net Core基础类库中实现的一个多线程相关的库，专门处理数据流相关的操作，用来在生产者和订阅者之间传递数据（不知道可不可以理解为线程间传递数据，我把它类比成了Go语言中的Channel），使用时需要通过NuGet安装。
这个库的前身是System.Threading.Tasks.Channels，来自实验性质的核心类库项目https://github.com/dotnet/corefxlab，但是在2017年9月就不再更新了，目前使用的话需要用到最新的System.Threading.Channels库，如果你也是第一次接触的话，就直接上手研究System.Threading.Channels就可以了。
Channel API操作基于Channel对象，其操作主要由ChannelReader和ChannelWriter两部分组成，由Channelt提供的工厂方法创建一个有容量限制（或者无限制、最大容量限制）的channel。这点类似于Go语言中的chan的容量，二者在这里有很多的类似的地方，也有不同的地方。
1.1. 和Go语言channel的一些比较 Go语言中的channel默认是没有容量的，在使用这个没有容量的channel时，生产者和消费者必须“流动”起来，否则将会阻塞，也就是当生产者写入channel一个数据时，必须同时有一个接收者接收，否则写入操作会停止，等待有一个消费者取走channel中的数据，写入操作才会继续。
在System.Threading.Channels库中，没有类似Go语言的默认容量的机制，需要按需调用不同的Channel对象：
 public static Channel&amp;lt;T&amp;gt; CreateBounded&amp;lt;T&amp;gt;(int capacity); ：可以创建一个带有容量限制的Channel实例对象。 public static Channel&amp;lt;T&amp;gt; CreateBounded&amp;lt;T&amp;gt;(BoundedChannelOptions options) ：创建一个自定义配置的Channel实例对象，可配置容量、以及在接收到新数据时的操作模式等等：  BoundedChannelFullMode.Wait：等待当前写入完成 BoundedChannelFullMode.DropNewest：删除并忽略管道中写入的最新的数据 BoundedChannelFullMode.DropOldest：删除并忽略管道中最旧的数据 BoundedChannelFullMode.DropWrite：删除当前正在写的数据，以写入管道中的新数据  public static Channel&amp;lt;T&amp;gt; CreateUnbounded&amp;lt;T&amp;gt;(); ：创建一个没有容量限制的Channel实例对象，在实际使用时应当谨慎使用该创建方式，因为可能会发生OutOfMemoryException。 public static Channel&amp;lt;T&amp;gt; CreateUnbounded&amp;lt;T&amp;gt;(UnboundedChannelOptions options)：创建一个自定义配置的没有容量限制的Channel实例对象。该配置选项因为没有容量限制所以不会有写入等待操作模式，只有默认的一些配置：  public bool SingleWriter { get; set; }：是否需要一个一个读 public bool SingleReader { get; set; }：是否需要一个一个写 public bool AllowSynchronousContinuations { get; set; }：是否需要异步连续操作（我个人理解为异步操作时同时进行读写）   Go语言的channel机制和System.Threading.Channels的不同之处有两个：
 Go语言没有无限容量的channel，而且就我个人的想法而言，无限容量并不“无限”，因为内存是有限的。 System.Threading.Channels没有单向的channel类型。在Go中可以创建“只读”或者“只写”的channel，但是System.Threading.Channels中没有提供这种操作。  1.</description>
    </item>
    
    <item>
      <title>在.Net Core中实现一个WebSocket路由</title>
      <link>/csharp/%E5%9C%A8.net-core%E4%B8%AD%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAwebsocket%E8%B7%AF%E7%94%B1/</link>
      <pubDate>Sun, 27 Jan 2019 17:41:16 +0800</pubDate>
      
      <guid>/csharp/%E5%9C%A8.net-core%E4%B8%AD%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AAwebsocket%E8%B7%AF%E7%94%B1/</guid>
      <description>.Net Core中使用WebSocket默认是没有路由系统的，只能通过Request.Path==&amp;quot;/xxx&amp;quot;来判断请求，例如：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20  app.Use(async (context, next) =&amp;gt; { if (context.Request.Path == &amp;#34;/ws&amp;#34;) { if (context.WebSockets.IsWebSocketRequest) { WebSocket webSocket = await context.WebSockets.AcceptWebSocketAsync(); await Echo(context, webSocket); } else { context.Response.StatusCode = 400; } } else { await next(); } });   要使用类似[HttpGet(&amp;quot;/xxx&amp;quot;)]这种特性标签的路由方式，可以自己写一个简单的Attribute来实现。
1. 实现Attribute特性类 这个Attribute类很简单，只接收一个定义的Path，用来和开头提到的Request.Path对应。
1 2 3 4 5 6 7 8 9 10 11 12 13  /// &amp;lt;summary&amp;gt;  /// WebSockets执行函数特性标签  /// &amp;lt;/summary&amp;gt; [AttributeUsage(AttributeTargets.</description>
    </item>
    
    <item>
      <title>微信JSSDK的使用</title>
      <link>/csharp/%E5%BE%AE%E4%BF%A1jssdk%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 15 Mar 2017 20:33:03 +0800</pubDate>
      
      <guid>/csharp/%E5%BE%AE%E4%BF%A1jssdk%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;h1 id=&#34;1-概述和官方文档&#34;&gt;1. 概述和官方文档&lt;/h1&gt;

&lt;p&gt;　　使用微信JSSDK可以在网页中调用手机的拍照语音、定位等手机系统功能，还可以定制微信分享、扫一扫、卡券、支付等微信功能。
　　官方文档：&lt;a href=&#34;http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html&#34;&gt;http://mp.weixin.qq.com/wiki/7/aaa137b55fb2e0456bf8dd9148dd613f.html&lt;/a&gt;
　　&lt;/p&gt;

&lt;h1 id=&#34;2-调用步骤&#34;&gt;2. 调用步骤&lt;/h1&gt;

&lt;h2 id=&#34;2-1-绑定域名&#34;&gt;2.1. 绑定域名&lt;/h2&gt;

&lt;p&gt;　　首先进入&lt;a href=&#34;http://mp.weixin.qq.com/&#34;&gt;微信公众号后台&lt;/a&gt;，进入公众号设置=&amp;gt;功能设置=&amp;gt;JS接口安全域名设置：在这里可以设置三个调用的JSSDK的域名，然后将提示信息注意事项3中的&lt;a href=&#34;https://mp.weixin.qq.com/cgi-bin/mpverifytxt?lang=zh_CN&amp;amp;token=1492992380&#34;&gt;文件下载&lt;/a&gt;下来，放到网站的根目录下，点击保存，微信会自动测试是否设置成功。&lt;/p&gt;

&lt;h2 id=&#34;2-2-页面引入js文件&#34;&gt;2.2. 页面引入JS文件&lt;/h2&gt;

&lt;p&gt;　　在需要使用到JSSDK的页面引入微信提供的js文件，可以支持https协议，下载：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用CsvHelper导入导出csv文件</title>
      <link>/csharp/%E4%BD%BF%E7%94%A8csvhelper%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BAcsv%E6%96%87%E4%BB%B6/</link>
      <pubDate>Sat, 25 Feb 2017 00:39:03 +0800</pubDate>
      
      <guid>/csharp/%E4%BD%BF%E7%94%A8csvhelper%E5%AF%BC%E5%85%A5%E5%AF%BC%E5%87%BAcsv%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;今天记录一下使用&lt;a href=&#34;https://github.com/JoshClose/CsvHelper&#34;&gt;CsvHelper&lt;/a&gt;导入导出CSV文件的方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&#34;1-csv介绍&#34;&gt;1. CSV介绍&lt;/h1&gt;

&lt;p&gt;　　csv文件是一种纯文本存储的文件格式，行和列分别用逗号和换行来代替，可以直接使用Excel打开。在代码中可以直接使用&lt;code&gt;TextWrite&lt;/code&gt; 操作，比较方便快速。&lt;/p&gt;

&lt;h1 id=&#34;2-csvhelper&#34;&gt;2. CsvHelper&lt;/h1&gt;

&lt;h2 id=&#34;2-1-项目介绍&#34;&gt;2.1. 项目介绍：&lt;/h2&gt;

&lt;p&gt;　　github主页：&lt;a href=&#34;https://github.com/JoshClose/CsvHelper&#34;&gt;https://github.com/JoshClose/CsvHelper&lt;/a&gt;
　　文档：&lt;a href=&#34;http://joshclose.github.io/CsvHelper/&#34;&gt;http://joshclose.github.io/CsvHelper/&lt;/a&gt;
　　wiki：&lt;a href=&#34;https://github.com/JoshClose/CsvHelper/wiki&#34;&gt;https://github.com/JoshClose/CsvHelper/wiki&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>值类型和引用类型</title>
      <link>/csharp/%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 17 Jul 2016 19:00:41 +0800</pubDate>
      
      <guid>/csharp/%E5%80%BC%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>使用Fiddler抓包分析API</title>
      <link>/csharp/%E4%BD%BF%E7%94%A8fiddler4%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90api/</link>
      <pubDate>Sun, 17 Jul 2016 13:22:44 +0800</pubDate>
      
      <guid>/csharp/%E4%BD%BF%E7%94%A8fiddler4%E6%8A%93%E5%8C%85%E5%88%86%E6%9E%90api/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Fiddler是一个http协议调试代理工具，它能够记录并且检查所有你的电脑和互联网之间的http通讯，设置断点，查看所有的“进出”Fiddler的数据（指cookie,html,js,css等文件，这些都可以让你胡乱修改的意思）。 Fiddler 要比其他的网络调试器要更加简单，因为它不仅仅暴露http通讯还提供了一个用户友好的格式。Fiddler 是用C#写出来的,它包含一个简单却功能强大的基于JScript .NET 事件脚本子系统，它的灵活性非常棒，可以支持众多的http调试任务，并且能够使用.net框架语言进行扩展。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;　　摘录一下百科的解释，简单点说Fiddler是个抓包工具，测试人员可能用的比较多，在UWP开发中使用的，就是为了开发第三方的软件而进行分析API接口，至于为啥要开发第三方的UWP，这得把巨硬抓起来打一顿就知道了。
　　&lt;/p&gt;

&lt;h1 id=&#34;准备&#34;&gt;准备&lt;/h1&gt;

&lt;p&gt;　　需要的工具：Android手机，电脑，WiFi。
　　首先我们去官网(&lt;a href=&#34;https://www.telerik.com/download/fiddler&#34;&gt;www.telerik.com&lt;/a&gt;)下载并安装Fiddler软件。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>UWP学习笔记:使用Grid和StackPanel布局</title>
      <link>/csharp/uwp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BD%BF%E7%94%A8grid%E5%92%8Cstackpanel%E5%B8%83%E5%B1%80/</link>
      <pubDate>Sun, 08 May 2016 21:40:48 +0800</pubDate>
      
      <guid>/csharp/uwp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BD%BF%E7%94%A8grid%E5%92%8Cstackpanel%E5%B8%83%E5%B1%80/</guid>
      <description>&lt;p&gt;　　第一篇关于UWP的笔记，学了几天的XAML布局，赶紧总结一下，免得健忘症发作。&lt;/p&gt;

&lt;h1 id=&#34;1-grid-https-msdn-microsoft-com-zh-cn-library-windows-apps-windows-ui-xaml-controls-grid-aspx&#34;&gt;1. &lt;a href=&#34;https://msdn.microsoft.com/zh-cn/library/windows/apps/windows.ui.xaml.controls.grid.aspx&#34;&gt;Grid&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;　　Grid顾名思义就是对页面进行网格布局的标签，可以将页面分成行(Row)和列(Column)交错的网格形式。&lt;/p&gt;

&lt;h2 id=&#34;1-1-设置行&#34;&gt;1.1. 设置行&lt;/h2&gt;

&lt;p&gt;　　&lt;code&gt;&amp;lt;Grid.RowDefintions&amp;gt;&amp;lt;/Grid.RowDefintions&amp;gt;&lt;/code&gt;标签可以设置行：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;Grid.RowDefintions&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;RowDefinition&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Height=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;Auto&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;RowDefinition&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Height=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;RowDefinition&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Height=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;2*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;RowDefinition&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Height=&lt;/span&gt;&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;100&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;/&amp;gt;&lt;/span&gt;
    ...
&lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;lt;/Grid.RowDefintions&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Guid.ToString()的格式化重载</title>
      <link>/csharp/guid-tostring-%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E9%87%8D%E8%BD%BD/</link>
      <pubDate>Wed, 20 Apr 2016 22:35:06 +0800</pubDate>
      
      <guid>/csharp/guid-tostring-%E7%9A%84%E6%A0%BC%E5%BC%8F%E5%8C%96%E9%87%8D%E8%BD%BD/</guid>
      <description>&lt;p&gt;以下内容参考&lt;a href=&#34;https://msdn.microsoft.com/zh-cn/library/97af8hh4.aspx&#34;&gt;msdn&lt;/a&gt;。&lt;/p&gt;

&lt;h1 id=&#34;1-格式化guid的值&#34;&gt;1. 格式化Guid的值&lt;/h1&gt;

&lt;p&gt;　　&lt;code&gt;Guid.ToString();&lt;/code&gt;这个方法有一个重载，接收一个string类型的参数，这个参数有固定值：“N”、“D”、“B”、“P”或“X”。
　　分别表示：
　　&lt;code&gt;N&lt;/code&gt;:返回32位数字，比如：00000000000000000000000000000000
　　&lt;code&gt;D&lt;/code&gt;:返回由连字符分隔的32位数字，比如：00000000-0000-0000-0000-000000000000
　　&lt;code&gt;B&lt;/code&gt;:返回在大括号中、由连字符分隔的32位数字，比如：{00000000-0000-0000-0000-000000000000}
　　&lt;code&gt;P&lt;/code&gt;:返回在圆括号中、由连字符分隔的32位数字，比如：(00000000-0000-0000-0000-000000000000)
　　&lt;code&gt;X&lt;/code&gt;:返回括在大括号中的4个十六进制，其中第四个值是括在大括号中的8个十六进制值的子集，比如：{0x00000000,0x0000,0x0000,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}}&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>EF code first简单示例</title>
      <link>/csharp/ef-code-first%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/</link>
      <pubDate>Wed, 13 Apr 2016 20:35:53 +0800</pubDate>
      
      <guid>/csharp/ef-code-first%E7%AE%80%E5%8D%95%E7%A4%BA%E4%BE%8B/</guid>
      <description>&lt;p&gt;　　一个简单的MVC5+EF6小demo，演示mvc和ef的简单编写流程。&lt;/p&gt;

&lt;h1 id=&#34;1-创建项目&#34;&gt;1. 创建项目&lt;/h1&gt;

&lt;p&gt;　　1、选择.Net Farmework版本为4.5以上的，这里我选择4.5.2
　　2、选择模板，选择&lt;strong&gt;Empty&lt;/strong&gt;，勾选MVC引用：&lt;img src=&#34;http://ww1.sinaimg.cn/mw690/c55a7aeegw1f2v56p11fvj20m80h8tc1.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>c#中yield的用法</title>
      <link>/csharp/c-%E4%B8%ADyield%E7%9A%84%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sat, 26 Mar 2016 17:01:24 +0800</pubDate>
      
      <guid>/csharp/c-%E4%B8%ADyield%E7%9A%84%E7%94%A8%E6%B3%95/</guid>
      <description>&lt;p&gt;　　记录一下c#中的一个关键字&lt;code&gt;yield&lt;/code&gt;的用法，之前基本没怎么用过这个算是语法糖的关键字，最近做了一个小的机构账号管理项目，读取DataReader对象数据时，每一次都得Add到集合中，记得以前见过有人用过这个方法，写起来很方便，所以学习了一下，记录下来以备查看。&lt;/p&gt;

&lt;h1 id=&#34;1-之前查找数据库数据的部分代码&#34;&gt;1. 之前查找数据库数据的部分代码&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;public&lt;/span&gt; List&amp;lt;Organization&amp;gt; OrgModel=&lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; List&amp;lt;Organization&amp;gt;();
&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; sqlText=&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;select * from Organization&amp;#34;&lt;/span&gt;;
&lt;span style=&#34;color:#8be9fd&#34;&gt;var&lt;/span&gt; dataTable = SqlHelper.ExecuteReader(sqlText);
            &lt;span style=&#34;color:#ff79c6&#34;&gt;if&lt;/span&gt; (dataTable.HasRows)
            {
                &lt;span style=&#34;color:#ff79c6&#34;&gt;while&lt;/span&gt; (dataTable.Read())
                {
                    Organization org = &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; Organization();
                    org.org_code = dataTable&lt;span style=&#34;color:#50fa7b&#34;&gt;[&amp;#34;org_code&amp;#34;]&lt;/span&gt;.ToString();
                    org.org_name = dataTable&lt;span style=&#34;color:#50fa7b&#34;&gt;[&amp;#34;org_name&amp;#34;]&lt;/span&gt;.ToString();
                    org.org_acount = dataTable&lt;span style=&#34;color:#50fa7b&#34;&gt;[&amp;#34;org_acount&amp;#34;]&lt;/span&gt;.ToString();
                    org.org_password = dataTable&lt;span style=&#34;color:#50fa7b&#34;&gt;[&amp;#34;org_password&amp;#34;]&lt;/span&gt;.ToString();
                    OrgModel.Add(org);
                }
            }
            &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; orgModel;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>在ashx页中使用Session</title>
      <link>/csharp/%E5%9C%A8ashx%E9%A1%B5%E4%B8%AD%E4%BD%BF%E7%94%A8session/</link>
      <pubDate>Sun, 20 Mar 2016 23:30:19 +0800</pubDate>
      
      <guid>/csharp/%E5%9C%A8ashx%E9%A1%B5%E4%B8%AD%E4%BD%BF%E7%94%A8session/</guid>
      <description>&lt;p&gt;　　&lt;/p&gt;

&lt;h1 id=&#34;1-正文&#34;&gt;1. 正文&lt;/h1&gt;

&lt;p&gt;　　在ashx中使用Session不能直接&lt;code&gt;context.Session[&amp;quot;sessionName&amp;quot;]=value;&lt;/code&gt; ,需要引入一个命名空间和继承一个接口。
　　命名空间：&lt;code&gt;using System.Web.SessionState;&lt;/code&gt;  作用：“IRequiresSessionState”接口的命名空间
　　接口：&lt;code&gt;IRequiresSessionState&lt;/code&gt;    作用:指定目标 HTTP 处理程序需要对会话状态值具有读写访问权&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>委托使用案例</title>
      <link>/csharp/%E5%A7%94%E6%89%98%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</link>
      <pubDate>Tue, 01 Mar 2016 23:43:54 +0800</pubDate>
      
      <guid>/csharp/%E5%A7%94%E6%89%98%E4%BD%BF%E7%94%A8%E6%A1%88%E4%BE%8B/</guid>
      <description>&lt;p&gt;把下面集合中字符串小于&lt;code&gt;&amp;quot;6&amp;quot;&lt;/code&gt;的结果查找并打印出来：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;List&amp;lt;&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;&amp;gt; strList = &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;&amp;gt;() { 
                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;9&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;32&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;7&amp;#34;&lt;/span&gt;
};&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;首先排除掉&lt;code&gt;foreach&lt;/code&gt;等做法，我们使用List集合自带的方法实现：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;31
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;using&lt;/span&gt; System;
&lt;span style=&#34;color:#ff79c6&#34;&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;span style=&#34;color:#ff79c6&#34;&gt;using&lt;/span&gt; System.Linq;

&lt;span style=&#34;color:#ff79c6&#34;&gt;namespace&lt;/span&gt; Delegate7
{
    &lt;span style=&#34;color:#ff79c6&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;Program&lt;/span&gt;
    {
        &lt;span style=&#34;color:#ff79c6&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;void&lt;/span&gt; Main(&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;[]&lt;/span&gt; args)
        {
            List&amp;lt;&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;&amp;gt; strList = &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; List&amp;lt;&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt;&amp;gt;()
            {
                &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;3&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;9&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;32&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;7&amp;#34;&lt;/span&gt;
            };

            &lt;span style=&#34;color:#6272a4&#34;&gt;//&amp;#34;Where&amp;#34;方法的内部执行：遍历strList集合，将集合中的每一个元素拿出来，传入委托去执行，
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#6272a4&#34;&gt;//如果委托返回true，那就把该元素拿出来，然后把所有符合条件的元素组成新的集合返回。
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;            &lt;span style=&#34;color:#8be9fd&#34;&gt;var&lt;/span&gt; resultList = strList.Where(
                &lt;span style=&#34;color:#ff79c6&#34;&gt;delegate&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; s) 
                {
                    &lt;span style=&#34;color:#ff79c6&#34;&gt;return&lt;/span&gt; s.CompareTo(&lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#34;6&amp;#34;&lt;/span&gt;) &amp;lt; &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;;
                });

            &lt;span style=&#34;color:#ff79c6&#34;&gt;foreach&lt;/span&gt; (&lt;span style=&#34;color:#8be9fd&#34;&gt;var&lt;/span&gt; item &lt;span style=&#34;color:#ff79c6&#34;&gt;in&lt;/span&gt; resultList)
            {
                Console.WriteLine(item);
            }
            Console.ReadKey();
        }
    }
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>委托内部构造</title>
      <link>/csharp/%E5%A7%94%E6%89%98%E5%86%85%E9%83%A8%E6%9E%84%E9%80%A0/</link>
      <pubDate>Tue, 01 Mar 2016 22:37:32 +0800</pubDate>
      
      <guid>/csharp/%E5%A7%94%E6%89%98%E5%86%85%E9%83%A8%E6%9E%84%E9%80%A0/</guid>
      <description>&lt;h1 id=&#34;1-委托的内部构造&#34;&gt;1. 委托的内部构造&lt;/h1&gt;

&lt;p&gt;　　委托的内部构造是什么样的？
　　在一个委托对象被创建后，该委托的内部由三部分组成：&amp;rdquo;_methodPtr(方法指针)&amp;ldquo;、&amp;rdquo;_target(目标对象)&amp;ldquo;、&amp;rdquo;委托链(多播委托时才有，否则为空)&amp;ldquo;，具体的构造我们画张图来看看：
&lt;img src=&#34;http://ww3.sinaimg.cn/mw690/c55a7aeejw1f1hridcavej20is0d874l.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>理解RESTful</title>
      <link>/csharp/%E7%90%86%E8%A7%A3restful/</link>
      <pubDate>Wed, 24 Feb 2016 23:37:09 +0800</pubDate>
      
      <guid>/csharp/%E7%90%86%E8%A7%A3restful/</guid>
      <description>&lt;p&gt;　　在学习Web API之前，我们首先接触的一个概念就是RESTful，个人觉得从名字(英文全名)上来理解还是很抽象的一个概念，刚开始接触的时候感觉似懂非懂，但是使用一段时间后再回来看这个问题就会比较清晰了。
　　在这篇博文中，我尽力把我所理解的RESTful解释清楚，理解错误可能难免，希望有看到的同学能指点一下。&lt;/p&gt;

&lt;p&gt;😒 &lt;strong&gt;简单粗暴版&lt;/strong&gt;：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>.NET-.NET Core中的配置</title>
      <link>/csharp/net-net-core%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE/</link>
      <pubDate>Sat, 20 Feb 2016 13:31:43 +0800</pubDate>
      
      <guid>/csharp/net-net-core%E4%B8%AD%E7%9A%84%E9%85%8D%E7%BD%AE/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;就在截稿时间之前，Microsoft 宣布了更改 ASP.NET 5 和相关堆叠的名称。ASP.NET 5 已更名为 ASP.NET Core 1.0。Entity Framework (EF) 7 已更名为 Entity Framework (EF) Core 1.0。虽然 ASP.NET 5 和 EF7 程序包以及命名空间将会发生变化，但新的命名法不会对本文中的课程造成任何影响。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;使用 ASP.NET 5 的同仁们自然都会注意到此平台中新增了配置支持，可用于 NuGet 包的 Microsoft.Extensions.Configuration 集合。&lt;/p&gt;

&lt;p&gt;新的配置支持名称/值对列表（可分入多层层次结构）。例如，您可以将一个设置存储在 SampleApp:Users:InigoMontoya:MaximizeMainWindow 中，将另一个设置存储在 SampleApp:AllUsers:Default:MaximizeMainWindow 中。&lt;/p&gt;

&lt;p&gt;存储的所有值都会映射到字符串，您可以借助内置的绑定支持，将设置反序列化为自定义 POCO 对象。已经熟悉新配置 API 的同仁们可能最初是在 ASP.NET 5 注意到的。不过，此 API 绝不仅限于 ASP.NET。实际上，本文中的所有列表都是使用 Microsoft .NET Framework 4.5.1（同时引用 ASP.NET 5 RC1 中的 Microsoft.Extensions.Configuration 包）在 Visual Studio 2015 单元测试项目中创建（有关源代码，请访问 &lt;a href=&#34;http://github.com/IntelliTect/Articles&#34;&gt;gitHub.com/IntelliTect/Articles&lt;/a&gt;）。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数据点-重构ASP.NET5/EF6项目和依赖关系注入</title>
      <link>/csharp/%E6%95%B0%E6%8D%AE%E7%82%B9-%E9%87%8D%E6%9E%84asp-net5-ef6%E9%A1%B9%E7%9B%AE%E5%92%8C%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB%E6%B3%A8%E5%85%A5/</link>
      <pubDate>Tue, 16 Feb 2016 13:05:29 +0800</pubDate>
      
      <guid>/csharp/%E6%95%B0%E6%8D%AE%E7%82%B9-%E9%87%8D%E6%9E%84asp-net5-ef6%E9%A1%B9%E7%9B%AE%E5%92%8C%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB%E6%B3%A8%E5%85%A5/</guid>
      <description>&lt;p&gt;就在截稿时间之前，Microsoft 宣布了更改 ASP.NET 5 和相关堆叠的名称。ASP.NET 5 已更名为 ASP.NET Core 1.0。Entity Framework (EF) 7 已更名为 Entity Framework (EF) Core 1.0。虽然 ASP.NET 5 和 EF7 程序包以及命名空间将会发生变化，但新的命名法不会对本文中的课程造成任何影响。&lt;/p&gt;

&lt;p&gt;依赖关系注入 (DI) 都是关于松耦合的 (&lt;a href=&#34;http://bit.ly/1TZWVtW&#34;&gt;bit.ly/1TZWVtW&lt;/a&gt;。您从其他位置（理想情况下是类构造函数）请求获取您依赖的类，而不是将这些类硬编码为其他类。这遵循的是显式依赖关系原则，可以更明确地告知类用户此类所需的协作者。这样一来，您还可以在类对象实例有备选配置的情况下构建更灵活的软件，同时这也对编写这种类的自动测试真正有益。我的工作领域就是和 Entity Framework代码不停地打交道。典型的例子是：在不使用松耦合的情况下编码就是在创建可直接实例化 DbContext 的存储库或控制器。我已经上千次这样做过。实际上，我撰写这篇文章的目标是为了向我在专栏“EF6、EF7 与 ASP.NET 5 组合”(&lt;a href=&#34;http://msdn.com/magazine/dn973011&#34;&gt;msdn.com/magazine/dn973011&lt;/a&gt;) 中编写的代码应用我所学到的 DI知识。例如，在下面的方法中，我就直接实例化了 DbContext：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>string类常用函数和属性</title>
      <link>/csharp/string%E7%B1%BB%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</link>
      <pubDate>Wed, 03 Feb 2016 01:25:40 +0800</pubDate>
      
      <guid>/csharp/string%E7%B1%BB%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</guid>
      <description>&lt;h1 id=&#34;1-字符串的特殊性&#34;&gt;1. 字符串的特殊性&lt;/h1&gt;

&lt;p&gt;　　1、字符串的不可变性，当我们在给字符串进行重新赋值、拼接、累加的过程中，都会在内存的堆空间中重新开辟一块新的空间。
　　2、我们可以将字符串看做是一个&lt;code&gt;char&lt;/code&gt;类型的数组。&lt;/p&gt;

&lt;h1 id=&#34;2-字符串常用函数&#34;&gt;2. 字符串常用函数：&lt;/h1&gt;

&lt;p&gt;&lt;code&gt;ToCharArray();&lt;/code&gt; 将字符串转换成一个char类型的数组：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>11、Umbraco入门总结</title>
      <link>/csharp/11umbraco%E5%85%A5%E9%97%A8%E6%80%BB%E7%BB%93/</link>
      <pubDate>Sun, 10 Jan 2016 14:05:19 +0800</pubDate>
      
      <guid>/csharp/11umbraco%E5%85%A5%E9%97%A8%E6%80%BB%E7%BB%93/</guid>
      <description>&lt;p&gt;　　Umbraco入门教程算是告一段落了，其实将其称为“教程”，我觉得有些惭愧，因为其中并没有什么干货，编码也不是很好，所以在这里跟大家说句抱歉，也请朋友们不要见怪，暂且称其为“教程”吧，也希望能够认识更多的朋友，大家互相学习。&lt;/p&gt;

&lt;p&gt;　　这些在Umbraco的使用中是最基本的使用方法，Umbraco是非常强大的，我目前掌握的还只是皮毛罢了，在这里只是希望给自己记个笔记，如果能帮到刚刚接触到Umbraco的朋友，那就万幸的。如果有时间和精力，我会继续写一些关于Umbraco的高级一点的用法，我自己也会努力学习，学习是无止境的。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>10、UmbracoNewsSite：首页新闻聚合</title>
      <link>/csharp/10umbraconewssite%E9%A6%96%E9%A1%B5%E6%96%B0%E9%97%BB%E8%81%9A%E5%90%88/</link>
      <pubDate>Sun, 10 Jan 2016 12:56:07 +0800</pubDate>
      
      <guid>/csharp/10umbraconewssite%E9%A6%96%E9%A1%B5%E6%96%B0%E9%97%BB%E8%81%9A%E5%90%88/</guid>
      <description>&lt;p&gt;　　目前为止已经实现了基本的新闻展示和新闻内容添加管理的功能演示，这一篇是Umbraco入门的最后一篇教程，我们看看怎么在首页拿到其他页面的数据的。&lt;/p&gt;

&lt;p&gt;　　要在首页拿到几个新闻板块的节点，然后分别读取最新的新闻数据显示在首页中。
　　我们需要在&lt;strong&gt;Home&lt;/strong&gt;模板中进行编写代码，具体的代码如下：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>9、UmbracoNewsSite：分页</title>
      <link>/csharp/9umbraconewssite%E5%88%86%E9%A1%B5/</link>
      <pubDate>Sat, 09 Jan 2016 13:54:45 +0800</pubDate>
      
      <guid>/csharp/9umbraconewssite%E5%88%86%E9%A1%B5/</guid>
      <description>&lt;p&gt;　　接着上一篇博客的内容，这一篇我们开始给新闻列表进行分页。&lt;/p&gt;

&lt;p&gt;　　首先说一下分页的思路，由于Umbraco使用的是模板的结构，所以我们需要将分页的页码数发送到当前的页面中，然后拿到这个页码数，对应的进行读取对应页码的新闻。
　　首先给当前的新闻分类添加了10条新闻，然后按照每页显示3条来进行分页。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>8、UmbracoNewsSite：添加新闻列表</title>
      <link>/csharp/8umbraconewssite%E6%B7%BB%E5%8A%A0%E6%96%B0%E9%97%BB%E5%88%97%E8%A1%A8/</link>
      <pubDate>Fri, 08 Jan 2016 12:20:45 +0800</pubDate>
      
      <guid>/csharp/8umbraconewssite%E6%B7%BB%E5%8A%A0%E6%96%B0%E9%97%BB%E5%88%97%E8%A1%A8/</guid>
      <description>&lt;p&gt;　　在上一篇中添加了新闻详情页面，但是没有任何可以指向这条新闻内容的跳转，所以需要将新闻添加到新闻列表中展示。&lt;/p&gt;

&lt;p&gt;　　现在我们找到&lt;strong&gt;News List&lt;/strong&gt;模板，对其中的代码进行编辑，以展示新闻列表。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>7、UmbracoNewsSite：新闻详情页</title>
      <link>/csharp/7umbraconewssite%E6%96%B0%E9%97%BB%E8%AF%A6%E6%83%85%E9%A1%B5%E5%92%8C%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/</link>
      <pubDate>Thu, 07 Jan 2016 21:53:36 +0800</pubDate>
      
      <guid>/csharp/7umbraconewssite%E6%96%B0%E9%97%BB%E8%AF%A6%E6%83%85%E9%A1%B5%E5%92%8C%E5%88%97%E8%A1%A8%E5%B1%95%E7%A4%BA/</guid>
      <description>&lt;p&gt;　　这一篇我们创建一个新闻详情页文档类型，然后尝试编辑新闻内容。&lt;/p&gt;

&lt;p&gt;　　首先确定新闻详情页需要什么？应该有新闻标题、新闻内容、新闻简介、新闻缩略图；其中后两个是为了在新闻列表展示该新闻信息设置的。确定了这些，现在就可以开始编写了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>6、UmbracoNewsSite：添加新闻分类</title>
      <link>/csharp/6umbraconewssite%E6%B7%BB%E5%8A%A0%E6%96%B0%E9%97%BB%E5%88%86%E7%B1%BB/</link>
      <pubDate>Wed, 06 Jan 2016 16:21:30 +0800</pubDate>
      
      <guid>/csharp/6umbraconewssite%E6%B7%BB%E5%8A%A0%E6%96%B0%E9%97%BB%E5%88%86%E7%B1%BB/</guid>
      <description>&lt;p&gt;　　上一篇做了一个简单的首页，在导航条上添加了几个新闻板块，接下来我们就添加这几个新闻板块的页面。&lt;/p&gt;

&lt;p&gt;　　开始我们还是需要创建&lt;strong&gt;Document Types&lt;/strong&gt;用来展示新闻列表。我们先做好规划，新闻列表只需要把新闻标题和图片展示出来就可以了，。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>5、UmbracoNewsSite：添加css和js文件</title>
      <link>/csharp/5umbraconewssite%E6%B7%BB%E5%8A%A0%E6%9B%B4%E5%A4%9A%E5%86%85%E5%AE%B9/</link>
      <pubDate>Tue, 05 Jan 2016 10:41:40 +0800</pubDate>
      
      <guid>/csharp/5umbraconewssite%E6%B7%BB%E5%8A%A0%E6%9B%B4%E5%A4%9A%E5%86%85%E5%AE%B9/</guid>
      <description>我们接着上一篇的内容，这一篇我们引入stylesheets样式，并且尝试添加其他页面的内容。
　打开visual studio，在项目根目录下新建js和css文件夹，分别把bootstrap的文件复制进去。(如果已经有就不用新建了) 然后打开Umbraco后台管理页面，刷新之后就可以看到Stylesheets节点下面出现了刚刚复制的文件。这是因为Umbraco规定了Stylesheet节点默认去读取根目录下名为*css*的文件夹中的文件；看到这你可能会下意识的认为那Scripts节点下肯定会出现刚才复制的js脚本文件啦！事实是——没有！Scripts节点默认读取的文件夹名是*scripts*，所以在引用这些文件的时候要注意路径。
　文件添加完毕了，我们在程序中引用文件，在Templates节点下打开Master文件，然后将bootstrap文件分别添加进去(这里需要注意路径)。
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;zh-cn&amp;#34;&amp;gt; &amp;lt;head&amp;gt; ...... &amp;lt;!-- CSS --&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; type=&amp;#34;text/css&amp;#34; href=&amp;#34;/css/bootstrap.min.css&amp;#34;&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; ....... &amp;lt;!-- Javascripts --&amp;gt; &amp;lt;script src=&amp;#34;/js/jquery.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;#34;/js/bootstrap.min.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt;   　接下来我们进入编码工作，为了方便编写代码，可以进入visual studio进行编写，在Umbraco后台创建的文件内容在源代码中都可以找到，其中Templates节点下的文件在VS项目中的Views文件夹下，这下MVC模式就可以体现出来了。为了演示，我会继续在网页后台写代码，这个没有特别的限制。 　我们把*Master*模板代码改动一下，让页面稍微好看一点。代码如下：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58  @inherits Umbraco.</description>
    </item>
    
    <item>
      <title>4、UmbracoNewsSite：Templates展示内容数据</title>
      <link>/csharp/4umbraconewssitetemplates%E5%B1%95%E7%A4%BA%E5%86%85%E5%AE%B9%E6%95%B0%E6%8D%AE/</link>
      <pubDate>Mon, 04 Jan 2016 16:45:02 +0800</pubDate>
      
      <guid>/csharp/4umbraconewssitetemplates%E5%B1%95%E7%A4%BA%E5%86%85%E5%AE%B9%E6%95%B0%E6%8D%AE/</guid>
      <description>&lt;p&gt;　　接着上一篇博客内容，这一篇我们来看看怎么把设置好的数据展示在网页上面。&lt;/p&gt;

&lt;p&gt;　　因为Umbraco是基于MVC编写的软件，我们也最好遵循这个方式，也就是一个模板页(master)，然后再使用部分页(partial view)展示具体的内容。这里的模板需要创建在&lt;strong&gt;Setting&amp;ndash;&amp;gt;Templates&lt;/strong&gt;节点下面。我们打开&lt;strong&gt;Templates&lt;/strong&gt;节点，可以看到我们创建的Home模板已经在这里了。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>3、UmbracoNewsSite：文档类型设置</title>
      <link>/csharp/3umbraconewssite-%E4%B8%80/</link>
      <pubDate>Sun, 03 Jan 2016 13:37:04 +0800</pubDate>
      
      <guid>/csharp/3umbraconewssite-%E4%B8%80/</guid>
      <description>&lt;p&gt;　　从这一篇开始，我们制作一个简单的新闻网站UmbracoNewsStie，用来演示Umbraco的实际使用技巧。&lt;/p&gt;

&lt;p&gt;　　在开始，我们需要先创建文档类型才能进行其他的操作，文档类型就是网站要展示什么。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>2、Umbraco后台管理功能介绍</title>
      <link>/csharp/umbraco%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/</link>
      <pubDate>Sat, 02 Jan 2016 11:13:41 +0800</pubDate>
      
      <guid>/csharp/umbraco%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E5%8A%9F%E8%83%BD%E4%BB%8B%E7%BB%8D/</guid>
      <description>&lt;p&gt;　　上一篇博客介绍了Umbraco的安装，这一篇里面介绍一下umbraco的后台管理的一些主要功能的使用方式。
　　首先介绍一下侧边栏的几个主要功能：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>1、Umbraco简介和安装</title>
      <link>/csharp/umbraco%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 01 Jan 2016 21:23:04 +0800</pubDate>
      
      <guid>/csharp/umbraco%E7%AE%80%E4%BB%8B/</guid>
      <description>&lt;p&gt;　　Umbraco是国外一个开源的Cms(内容管理)系统，适合做新闻发布、官网等内容需要经常更改变动的网站，也可以作为论坛软件使用，比如asp.net论坛就是基于umbraco制作的。而且Umbraco是使用“所见即所得”的形式，对网站的控制更加方便简单。可谓分分钟做出一个功能齐全的网站的节奏。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>MVC延伸：MVP、MVVM</title>
      <link>/csharp/mvc%E5%BB%B6%E4%BC%B8mvpmvvm/</link>
      <pubDate>Sat, 19 Sep 2015 01:16:16 +0800</pubDate>
      
      <guid>/csharp/mvc%E5%BB%B6%E4%BC%B8mvpmvvm/</guid>
      <description>&lt;p&gt;　　学习和使用ASP.NET MVC也有一段时间了，对这种开发方式(模式)有了更进一步的了解，今天就跳出ASP.NET的圈子，说一说我了解到的MVC，以及延伸到的MVP、MVVM。(如果理解的不到位希望有看到的这篇博文的同学在评论中指出😛)&lt;/p&gt;

&lt;h1 id=&#34;1-mvc&#34;&gt;1. MVC&lt;/h1&gt;

&lt;p&gt;　　一开始接触MVC时最先想到的是，MVC算不算是一种设计模式？为什么GoF的23种设计模式中没有MVC模式？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>HTML辅助方法</title>
      <link>/csharp/html%E8%BE%85%E5%8A%A9%E6%96%B9%E6%B3%95/</link>
      <pubDate>Sun, 02 Aug 2015 23:15:02 +0800</pubDate>
      
      <guid>/csharp/html%E8%BE%85%E5%8A%A9%E6%96%B9%E6%B3%95/</guid>
      <description>&lt;p&gt;　　HTML辅助方法，也就是&lt;code&gt;HtmlHelper&lt;/code&gt;，就是帮助快捷的产生HTML标签的作用。
　　HTML辅助方法可以编写超链接、表单(&lt;form&gt;)、输入框、选项、加载其他的分布视图(Partial View)等。&lt;/p&gt;

&lt;h1 id=&#34;1-超链接-html-actionlink&#34;&gt;1. 超链接：Html.ActionLink&lt;/h1&gt;

&lt;p&gt;　　&lt;code&gt;@Html.ActionLink()&lt;/code&gt;用于产生超链接。并且链接的文字部分会自动的进行HTML编码(HtmlEncode)。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>反射(reflection)</title>
      <link>/csharp/%E5%8F%8D%E5%B0%84-reflection/</link>
      <pubDate>Thu, 18 Jun 2015 16:01:14 +0800</pubDate>
      
      <guid>/csharp/%E5%8F%8D%E5%B0%84-reflection/</guid>
      <description>&lt;h1 id=&#34;1-什么是反射&#34;&gt;1. 什么是反射&lt;/h1&gt;

&lt;p&gt;　　一个运行的程序查看本身或者其他程序的元数据的行为称为反射(reflection)。
　　元数据(metadata)：有关程序及其类型的数据称为元数据，它们保存在程序的程序集中。&lt;/p&gt;

&lt;p&gt;　　&lt;strong&gt;反射功能引用自system.Reflection命名空间&lt;/strong&gt;，要使用反射需要使用&lt;code&gt;System.Reflection&lt;/code&gt;命名空间。
　　BCL(基类库)声明了一个叫做&lt;code&gt;Type&lt;/code&gt;的抽象类，它被设计用来包含类型的特性，使用这个类的对象能让我们获取程序使用的类型的信息。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>数组(array)</title>
      <link>/csharp/%E6%95%B0%E7%BB%84-array/</link>
      <pubDate>Sun, 07 Jun 2015 00:20:12 +0800</pubDate>
      
      <guid>/csharp/%E6%95%B0%E7%BB%84-array/</guid>
      <description>&lt;h1 id=&#34;1-数组&#34;&gt;1. 数组&lt;/h1&gt;

&lt;p&gt;　　&lt;strong&gt;数组实际上是由一个变量名称表示的一组同类型的数据元素&lt;/strong&gt;，每一个元素都可以通过变量名称和一个或多个方括号中的索引名称来访问，例如：&lt;code&gt;MyArray[1]&lt;/code&gt;。&lt;/p&gt;

&lt;h1 id=&#34;2-定义&#34;&gt;2. 定义&lt;/h1&gt;

&lt;p&gt;　　■ 元素：数组中&lt;strong&gt;独立的数据项&lt;/strong&gt;被称为元素。数组的所有元素必须是相同类型的，或继承自相同的类型。
　　■ 秩/维度：数组可以有任何为正数的维度数(也就是几维数组的意思，例如二维数组的秩等于2)，数组的维度数称为秩(rank)。
　　■ 维度长度：数组的每一个维度有一个长度，就是这个方向的位置个数。
　　■ 数组长度：数组的所有维度中的元素的总和称为数组的长度。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>枚举(enumerate)</title>
      <link>/csharp/%E6%9E%9A%E4%B8%BE-enumerate/</link>
      <pubDate>Thu, 04 Jun 2015 23:14:38 +0800</pubDate>
      
      <guid>/csharp/%E6%9E%9A%E4%B8%BE-enumerate/</guid>
      <description>&lt;h1 id=&#34;1-什么是枚举&#34;&gt;1. 什么是枚举&lt;/h1&gt;

&lt;p&gt;　　枚举是程序员自己定义的类型，与类和结构一样。
　　■ 与结构一样，枚举是值类型，因此直接存储它们的数据，而不是分成引用和数据去存储。
　　■ 不能对枚举成员使用修饰符，它们都隐式的具有和枚举相同的可访问性。
　　■ 枚举只有一种类型的成员：命名的整数值常量。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//声明枚举的关键字是“enum”
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;enum&lt;/span&gt; TrafficLight
{
    Green,  &lt;span style=&#34;color:#6272a4&#34;&gt;//成员之间用逗号分隔
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    Yellow,  
    Red
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>接口(interface)</title>
      <link>/csharp/%E6%8E%A5%E5%8F%A3-interface/</link>
      <pubDate>Wed, 03 Jun 2015 01:08:11 +0800</pubDate>
      
      <guid>/csharp/%E6%8E%A5%E5%8F%A3-interface/</guid>
      <description>&lt;h1 id=&#34;1-什么是接口&#34;&gt;1. 什么是接口&lt;/h1&gt;

&lt;p&gt;　　接口是一种能力的体现。
　　接口是表示一组&lt;strong&gt;函数成员&lt;/strong&gt;而不是实现成员的引用类型，类和结构可以实现接口。&lt;/p&gt;

&lt;h1 id=&#34;2-声明接口&#34;&gt;2. 声明接口&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;7
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//声明接口的关键字是“interface”
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;interface&lt;/span&gt; IMyInterface
{
    &lt;span style=&#34;color:#6272a4&#34;&gt;//接口中的方法没有方法体(也就是没有具体的实现)
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; GetSum(&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; num1,&lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; num2); 
    &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; Speak(&lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; str);
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>结构(struct)</title>
      <link>/csharp/%E7%BB%93%E6%9E%84-struct/</link>
      <pubDate>Sun, 24 May 2015 23:26:37 +0800</pubDate>
      
      <guid>/csharp/%E7%BB%93%E6%9E%84-struct/</guid>
      <description>&lt;h1 id=&#34;1-什么是结构&#34;&gt;1. 什么是结构&lt;/h1&gt;

&lt;p&gt;　　结构是程序员定义的数据类型，非常类似于类，都有数据成员和函数成员。
　　结构就是轻量级的类，使用方式和枚举差不多，方便归类存储数据。
　　结构和类的区别是：
　　■ 类是引用类型而结构是值类型。
　　■ 结构是隐式密封的，这意味着结构不能被派生。
&lt;strong&gt;声明结构&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;5
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//声明结构的关键字是“struct”
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#ff79c6&#34;&gt;struct&lt;/span&gt; &lt;span style=&#34;color:#50fa7b&#34;&gt;StructName&lt;/span&gt;
{
    MemberDeclarations
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>泛型(generic)</title>
      <link>/csharp/%E6%B3%9B%E5%9E%8B-generic/</link>
      <pubDate>Fri, 22 May 2015 16:17:54 +0800</pubDate>
      
      <guid>/csharp/%E6%B3%9B%E5%9E%8B-generic/</guid>
      <description>&lt;h1 id=&#34;1-什么是泛型&#34;&gt;1. 什么是泛型&lt;/h1&gt;

&lt;p&gt;　　我们平常所用到的类型都是特定的类型——由编程语言或者BCL(基类库)、程序员自己定义的。为了让代码更加的灵活、解耦，我们可以将类的行为提取出来，使这些相似性的特征不仅可以用在当前的数据类型上，而且还可以扩展到其他的类型上，这样使类更加的有用。
　　泛型就是专门处理这种情况的，泛型就可以替代这种抽象的数据类型，泛型就相当于是类型的占位符。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>事件(Event)</title>
      <link>/csharp/%E4%BA%8B%E4%BB%B6-event/</link>
      <pubDate>Thu, 21 May 2015 23:07:00 +0800</pubDate>
      
      <guid>/csharp/%E4%BA%8B%E4%BB%B6-event/</guid>
      <description>&lt;h1 id=&#34;1-事件是什么&#34;&gt;1. 事件是什么&lt;/h1&gt;

&lt;p&gt;　　事件是对象与对象之间的通信工具。
　　事件的很多方面和委托相似，事件就好像是被简化后的针对特殊用途的委托。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>委托(delegate)</title>
      <link>/csharp/%E5%A7%94%E6%89%98-delegate/</link>
      <pubDate>Wed, 20 May 2015 16:47:52 +0800</pubDate>
      
      <guid>/csharp/%E5%A7%94%E6%89%98-delegate/</guid>
      <description>&lt;h1 id=&#34;1-什么是委托&#34;&gt;1. 什么是委托&lt;/h1&gt;

&lt;p&gt;　　&lt;strong&gt;委托&lt;/strong&gt;是一个包含具有相同签名和返回值类型的有序方法列表。
　　■ 方法的列表称为&lt;strong&gt;调用列表&lt;/strong&gt;(invocation list)
　　■ 当委托被调用时，它调用列表中的每一个方法。
&lt;img src=&#34;/image/cSharp/cSharp31.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>异常(try语句)</title>
      <link>/csharp/%E5%BC%82%E5%B8%B8-try%E8%AF%AD%E5%8F%A5/</link>
      <pubDate>Tue, 19 May 2015 17:29:08 +0800</pubDate>
      
      <guid>/csharp/%E5%BC%82%E5%B8%B8-try%E8%AF%AD%E5%8F%A5/</guid>
      <description>&lt;h1 id=&#34;1-什么是异常&#34;&gt;1. 什么是异常&lt;/h1&gt;

&lt;p&gt;　　&lt;strong&gt;异常&lt;/strong&gt;是程序中的运行时错误，它违反了一个系统的约束或应用程序约束，或出现了在正常操作是位于聊的情形。&lt;/p&gt;

&lt;h1 id=&#34;2-try语句&#34;&gt;2. try语句&lt;/h1&gt;

&lt;p&gt;　　&lt;strong&gt;try&lt;/strong&gt;语句用来包裹住可能发生异常的代码块，如果异常发生的话，就提供代码处理该异常。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>c#类型、存储和变量</title>
      <link>/csharp/c-%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8%E5%92%8C%E5%8F%98%E9%87%8F/</link>
      <pubDate>Wed, 13 May 2015 22:02:53 +0800</pubDate>
      
      <guid>/csharp/c-%E7%B1%BB%E5%9E%8B%E5%AD%98%E5%82%A8%E5%92%8C%E5%8F%98%E9%87%8F/</guid>
      <description>&lt;p&gt;&lt;strong&gt;c#程序是一组类型声明&lt;/strong&gt;
　　如果广泛的描述C和C++程序源代码的特征，可以说C程序是一组函数数据类型，C++程序是一组函数和类，然而c#程序是一组类型声明。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;类型是一种模板&lt;/strong&gt;
　　既然c#程序是一组类型声明，那么使用c#就是创建和使用类型。
　　可以把类型想象成一个用来创建数据结构的模板。这个模板本身不是数据结构，但是详细说明了由该模板构造的对象的特征：
&lt;img src=&#34;/image/cSharp/cSharp8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>c#和.NET框架</title>
      <link>/csharp/c-%E5%92%8C-net%E6%A1%86%E6%9E%B6/</link>
      <pubDate>Tue, 12 May 2015 00:24:34 +0800</pubDate>
      
      <guid>/csharp/c-%E5%92%8C-net%E6%A1%86%E6%9E%B6/</guid>
      <description>&lt;p&gt;&lt;strong&gt;.NET框架的组成&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;　　.NET由三部分组成，如图所示：
&lt;img src=&#34;/image/cSharp/cSharp1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ASP.NET存储过程操作</title>
      <link>/csharp/asp-net%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Mon, 06 Apr 2015 17:21:22 +0800</pubDate>
      
      <guid>/csharp/asp-net%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B%E6%93%8D%E4%BD%9C/</guid>
      <description>&lt;p&gt;原文地址：&lt;a href=&#34;http://www.cnblogs.com/libingql/archive/2010/05/02/1726104.html&#34;&gt;http://www.cnblogs.com/libingql/archive/2010/05/02/1726104.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;　　存储过程是存放在数据库服务器上的预先编译好的sql语句。使用存储过程，可以直接在数据库中存储并运行功能强大的任务。存储过程在第一应用程序执行时进行语法检查和编译，编译好的版本保存在高速缓存中。在执行重复任务时，存储过程可以提高性能和一致性。由于存储过程可以将一系列对数据库的操作放在数据库服务器上执行，因而可以降低Web服务器的负载，提高整个系统的性能。&lt;/p&gt;

&lt;h1 id=&#34;1-创建存储过程&#34;&gt;1. 、创建存储过程&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;16
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;USE Northwind
&lt;span style=&#34;color:#ff79c6&#34;&gt;GO&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;CREATE&lt;/span&gt; PROC [DBO].[GetOrdersByOrderDate]
    &lt;span style=&#34;color:#ff79c6&#34;&gt;@&lt;/span&gt;OrderDate DATETIME
&lt;span style=&#34;color:#ff79c6&#34;&gt;AS&lt;/span&gt;
    &lt;span style=&#34;color:#ff79c6&#34;&gt;SELECT&lt;/span&gt;
        [OrderID],[CustomerID],[OrderDate]
    &lt;span style=&#34;color:#ff79c6&#34;&gt;FROM&lt;/span&gt;
        [Orders]
    &lt;span style=&#34;color:#ff79c6&#34;&gt;WHERE&lt;/span&gt;
        [OrderDate] &lt;span style=&#34;color:#ff79c6&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span style=&#34;color:#ff79c6&#34;&gt;@&lt;/span&gt;OrderDate


USE Northwind
&lt;span style=&#34;color:#ff79c6&#34;&gt;GO&lt;/span&gt;
&lt;span style=&#34;color:#ff79c6&#34;&gt;EXEC&lt;/span&gt; GetByOrderDate &lt;span style=&#34;color:#f1fa8c&#34;&gt;&amp;#39;1996-10-10 0:00:00&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>ASP.NET中的Url重写</title>
      <link>/csharp/asp-net%E4%B8%AD%E7%9A%84url%E9%87%8D%E5%86%99/</link>
      <pubDate>Wed, 11 Feb 2015 13:47:48 +0800</pubDate>
      
      <guid>/csharp/asp-net%E4%B8%AD%E7%9A%84url%E9%87%8D%E5%86%99/</guid>
      <description>&lt;h1 id=&#34;1-一-为了页面更有利于seo优化-url重写程序需要做出的不可缺少的手段之一&#34;&gt;1. 一. 为了页面更有利于seo优化，url重写程序需要做出的不可缺少的手段之一。&lt;/h1&gt;

&lt;h1 id=&#34;2-二-目前url重写最常见的两种方法有&#34;&gt;2. 二.目前url重写最常见的两种方法有：&lt;/h1&gt;

&lt;p&gt;　　1. 通过熟悉页面的内部执行流程，也就是asp.net请求管道中的相关知识点，进行url重写。
　　2. 通过使用微软提供的UrlRewriter.dll实现url重写（简单）；&lt;/p&gt;

&lt;h1 id=&#34;3-三-在请求管道中的第一个请求管道中拦截url并使其完成url重写功能&#34;&gt;3. 三、在请求管道中的第一个请求管道中拦截url并使其完成url重写功能：&lt;/h1&gt;

&lt;p&gt;　　1. 熟悉请求管道实现程序运行的全过程：
　　　　(1)：BeginRequest: 开始处理请求
　　　　(2)：AuthenticateRequest授权验证请求，获取用户授权信息
　　　　(3):PostAuthenticateRequest获取成功
　　　　(4): AunthorizeRequest 授权，一般来检查用户是否获得权限&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>文件流操作流程代码</title>
      <link>/csharp/%E6%96%87%E4%BB%B6%E6%B5%81%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/</link>
      <pubDate>Tue, 27 Jan 2015 15:24:33 +0800</pubDate>
      
      <guid>/csharp/%E6%96%87%E4%BB%B6%E6%B5%81%E6%93%8D%E4%BD%9C%E6%B5%81%E7%A8%8B%E4%BB%A3%E7%A0%81/</guid>
      <description>&lt;h1 id=&#34;使用filestream来读取数据&#34;&gt;使用FileStream来读取数据&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 8
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;15
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;16
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;17
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;28
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//FileStream StreamReader和StreamWriter
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//FileStream用来操作字节
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//使用FileStream来读取一个文本文件 IO
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;
&lt;span style=&#34;color:#6272a4&#34;&gt;//1、创建FileStream对象
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//第一个参数用来指定操作文件的路径
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//第二个参数用来指定系统打开文件的方式
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//第三个参数用来指定我们要对数据的操作
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;            
&lt;span style=&#34;color:#ff79c6&#34;&gt;using&lt;/span&gt; (FileStream fsRead = &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; FileStream(&lt;span style=&#34;color:#f1fa8c&#34;&gt;@&amp;#34;C:\Users\SpringRain\Desktop\我是数据1.txt&amp;#34;&lt;/span&gt;, FileMode.OpenOrCreate, FileAccess.Read))
{

&lt;span style=&#34;color:#6272a4&#34;&gt;//2、设置缓冲区的大小 5M
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#8be9fd&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;[]&lt;/span&gt; buffer = &lt;span style=&#34;color:#ff79c6&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color:#8be9fd&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#50fa7b&#34;&gt;[1024 * 1024 * 5]&lt;/span&gt;;

&lt;span style=&#34;color:#6272a4&#34;&gt;//3、开始读取数据
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt; r = fsRead.Read(buffer, &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;, buffer.Length);

&lt;span style=&#34;color:#6272a4&#34;&gt;//4、去缓冲区中获得我们需要的数据
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#8be9fd&#34;&gt;string&lt;/span&gt; s = Encoding.Default.GetString(buffer, &lt;span style=&#34;color:#bd93f9&#34;&gt;0&lt;/span&gt;, r);
     Console.WriteLine(s);

&lt;span style=&#34;color:#6272a4&#34;&gt;//5、释放资源 流所占用的资源GC不能释放 需要我么自己手动的释放  
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;//写在using里面就不许要我们自己去手动释放资源了
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#6272a4&#34;&gt;//fsRead.Dispose();
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#6272a4&#34;&gt;//fsRead.Close();
&lt;/span&gt;&lt;span style=&#34;color:#6272a4&#34;&gt;&lt;/span&gt;     Console.ReadKey();
} &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>