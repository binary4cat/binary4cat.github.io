<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golangs on Haijd&#39;s Blog</title>
    <link>/golang/</link>
    <description>Recent content in Golangs on Haijd&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 20 Apr 2019 22:08:09 +0800</lastBuildDate>
    
	<atom:link href="/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Win10&#43;WSL配置Golang开发环境</title>
      <link>/golang/win10&#43;wsl%E9%85%8D%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Sat, 20 Apr 2019 22:08:09 +0800</pubDate>
      
      <guid>/golang/win10&#43;wsl%E9%85%8D%E7%BD%AEgolang%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
      <description>Linux 是比较理想的开发环境，先前电脑装的 Ubuntu 系统，流畅度、字体效果感觉都比 Windows 好，但是开发之外其他的内容就很难在 Linux 上进行了，例如印象笔记、微信 QQ 传输文件等，最近又换回了 Windows 系统，花时间借助 win10 的 Linux 子系统也能搭一个 Linux 下的开发环境。
安装 WSL 关于如何安装 WSL 的操作就省略了，Google 一下很多，也很简单，主要介绍一下其他的配置内容。
配置清华大学软件源 Ubuntu 官方阿软件源服务器在国外，执行apt-get比较慢，所以切换为国内的软件源进行加速，这里使用清华大学开源软件镜像站提供的 Ubuntu 镜像
Hyper 好看是第一生产力，Hyper 是一个第三方的命令行工具，使用Electron框架开发的，可配置性很高，有丰富的主题可以选择，直接秒杀自带的黑框框，来两张图对比一下： 安装 Hyper 直接上官网下载对应的版本安装即可。
配置 Hyper 默认为 WSL 的 terminal 打开 Hyper 窗口，在左上角菜单选择 Eidt -&amp;gt; Perferences&amp;hellip; 后会直接打开配置文件，配置文件是 js 文件很容易看懂。 我们主要修改shell这个属性的值，这个配置可以修改 Hyper 默认使用的 terminal 类型，我们输入wsl的路径：
1 2 3  shell: &amp;#39;C:\\Windows\\System32\\wsl.exe&amp;#39;, ... shellArgs: [&amp;#39;bash&amp;#39;], // 这是进入terminal时默认命令，可以酌情修改   修改完之后保存配置文件，Hyper 会热加载配置，不过重启一下最好。</description>
    </item>
    
    <item>
      <title>深入了解fmt包</title>
      <link>/golang/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3fmt%E5%8C%85/</link>
      <pubDate>Sat, 12 Jan 2019 20:39:10 +0800</pubDate>
      
      <guid>/golang/%E6%B7%B1%E5%85%A5%E4%BA%86%E8%A7%A3fmt%E5%8C%85/</guid>
      <description>英文原文：https://blog.gopheracademy.com/advent-2018/fmt/
 fmt包是我们最常使用的package，我们使用它打印输出一些内容，也可以当作字符串formatter工具。在这篇内容中我们再更进一步了解fmt的使用技巧。
Formatting Output Go fmt的方法支持多个“描述符”，一些常见的“描述符”例如：%s表示格式化输出为字符串，%d表示格式化输出为整数型，%f表示格式化输出为浮点类型。除了这些常见的，这里介绍一些其他的fmt包的“描述符”：
%v&amp;amp;%T %v将会格式化输出任意的变量的值，%T则会格式化输出任意变量的类型（type）
1 2  var e interface{} = 2.7182 fmt.Printf(&amp;#34;e = %v (%T)\n&amp;#34;, e, e)   输出：
1  e = 2.7182 (float64)   宽度 可以在格式化输出的时候，指定输出内容的宽度，例如：
1  fmt.Println(&amp;#34;[%10d]\n&amp;#34;, 353)   输出：
1  [ 353]   可以看到输出的内容在353前面多了7个空格(我真的数了)，加上“353”正好是10个字符，这就是“宽度”的意思，把变量格式化为指定的宽度输出。当然指定的宽度如果小于要输出的内容，那么就不会生效了。
这个宽度可以用在其他的“描述符”中，%s、%f、%T等等，对于%T这种使用宽度时，会给类型描述设置宽度，这么描述可能不清楚，可以看看代码：
1 2  s := &amp;#34;123&amp;#34; fmt.Printf(&amp;#34;[%10T]\n&amp;#34;, s) // 输出：[ string]   也可以在参数中指定宽度的数值，使用*来指代宽度数值参数，例如：
1  fmt.Printf(&amp;#34;%*d&amp;#34;, 10, 353)   输出：</description>
    </item>
    
    <item>
      <title>一个简单的逻辑英语音频小爬虫</title>
      <link>/golang/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%BB%E8%BE%91%E8%8B%B1%E8%AF%AD%E9%9F%B3%E9%A2%91%E5%B0%8F%E7%88%AC%E8%99%AB/</link>
      <pubDate>Wed, 05 Dec 2018 21:41:32 +0800</pubDate>
      
      <guid>/golang/%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E9%80%BB%E8%BE%91%E8%8B%B1%E8%AF%AD%E9%9F%B3%E9%A2%91%E5%B0%8F%E7%88%AC%E8%99%AB/</guid>
      <description>最近在看逻辑英语的课程，感觉还挺不错的，不过看完视频好像啥也没记住😥，正好看见有逻辑英语的纸质书就买了一本没事可以翻翻，这本书随书赠送了一些配套的音频，但是都是一个一个的分开在微信公众号文章内的，想要下载下来听比较方便一些，所以研究了一下，花了十几分钟写了个小爬虫，趁着有空写篇博客记录一下。
1. 网页分析 首先我们打开音频的汇总页面，看一下这个页面的HTML结构。 可以看到每一个音频都指向一个公众号图文网页，只需要获取这些href的链接就可以进去音频的页面了。
接下来我们进入图文页面，看看怎么获取音频文件。 在音频页面找了一下，没有发现有音频文件的，也没有找到&amp;lt;audio&amp;gt;标签，但是发现有一个不认识的标签mpvoice，看起来像是微信自己弄的一个标签，看来从页面上不能直接获取音频文件了。
先不管HTML代码了，点击播放按钮看一下是怎么播放的。
没有发现什么有价值的东西，先放弃分析HTML了，看看Network中有什么有用的东西，点完之后果然有收获。 看这个接口大概就可以猜到是获取音频的，复制链接在新窗口打开，果真是音频文件。在打开几个音频图文，可以发现每个音频调用的都是相同的接口，唯一的区别就是查询参数mediaid的值不同，由此可以知道微信图文获取音频是调用该接口，带上音频的一个id就可以获取。
接下来就是找找mediaid在哪里了，打开HTML代码，很容易就发现了在&amp;lt;mpvoice&amp;gt;标签上有一个voice_encode_fileid属性的值就是mediaid的值。
分析完了页面的结构，接下来就很容易写代码了。
2. 代码编写 使用Go语言写简单的爬虫很快，先说几个关键点，然后贴完整的代码。
代码使用了github.com/PuerkitoBio/goquery这个库解析HTML结构的，如果你熟悉JQuery的使用，那么可以很容易的使用这个库解析HTML获取有用的数据。
1 2 3 4 5  // 创建音频汇总列表的DOM读取器 doc, docErr := goquery.NewDocumentFromReader(strings.NewReader(res)) if docErr!=nil { log.Fatalf(&amp;#34;%v&amp;#34;,docErr) }    首先使用NewDocumentFromReader函数将获取的页面HTML字符串，转换成goquery中的Document结构，Document中包含的Node可以由选择器语法进行解析。  1 2 3 4 5  // 读取列表中的每一个音频链接 doc.Find(&amp;#34;section a&amp;#34;).Each(func(i int,s *goquery.Selection){ mp3Url:=s.AttrOr(&amp;#34;href&amp;#34;,&amp;#34;&amp;#34;) log.Printf(&amp;#34;%v&amp;#34;,mp3Url) })    使用Find函数获取HTML中的指定Node，指定的方式是跟使用Jquery一样的，例如这里我们查找section标签下的a标签。 由于a标签是有很多个的，所以这里使用Each函数处理每一个节点。 然后在循环中，获取每一个a标签的href属性的值。获取节点属性的值有两个方法:  AttrOr(&amp;quot;&amp;quot;,&amp;quot;&amp;quot;)：第一个参数是属性的名字，第二个参数是没有找到指定的属性时，默认返回的值。 Attr(&amp;quot;&amp;quot;)：这个方法如果没有找到指定的属性，就会返回string和bool类型的零值，否则就返回指定属性的值和true。   完整的代码：
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97  package main import ( &amp;#34;os&amp;#34; &amp;#34;io&amp;#34; &amp;#34;log&amp;#34; &amp;#34;strings&amp;#34; &amp;#34;net/http&amp;#34; &amp;#34;io/ioutil&amp;#34; &amp;#34;github.</description>
    </item>
    
    <item>
      <title>GoWeb示例笔记</title>
      <link>/golang/goweb%E7%A4%BA%E4%BE%8B%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sat, 28 Oct 2017 17:05:51 +0800</pubDate>
      
      <guid>/golang/goweb%E7%A4%BA%E4%BE%8B%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;学习&lt;a href=&#34;http://books.studygolang.com/gowebexamples&#34;&gt;GoWeb示例&lt;/a&gt;的笔记，做了总结和摘录，加入了一些没有提到的知识点。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go by Example笔记</title>
      <link>/golang/go-by-example%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Thu, 26 Oct 2017 20:59:43 +0800</pubDate>
      
      <guid>/golang/go-by-example%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;学习&lt;a href=&#34;http://books.studygolang.com/gobyexample/&#34;&gt;Go by Example&lt;/a&gt;的笔记，做了总结和摘录，加入了一些没有提到的知识点。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go标准库笔记Ⅰ：IO</title>
      <link>/golang/go%E6%A0%87%E5%87%86%E5%BA%93%E7%AC%94%E8%AE%B0io/</link>
      <pubDate>Sat, 14 Oct 2017 16:56:24 +0800</pubDate>
      
      <guid>/golang/go%E6%A0%87%E5%87%86%E5%BA%93%E7%AC%94%E8%AE%B0io/</guid>
      <description>&lt;h2 id=&#34;io-基本的i-o接口&#34;&gt;&lt;code&gt;io&lt;/code&gt;：基本的I/O接口&lt;/h2&gt;

&lt;h3 id=&#34;reader-接口&#34;&gt;&lt;code&gt;Reader&lt;/code&gt;接口&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;定义：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;1
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;2
&lt;/span&gt;&lt;span style=&#34;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7c7c79&#34;&gt;3
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre style=&#34;color:#f8f8f2;background-color:#282a36;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Golang&#34; data-lang=&#34;Golang&#34;&gt;&lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;type&lt;/span&gt; Reader &lt;span style=&#34;color:#8be9fd;font-style:italic&#34;&gt;interface&lt;/span&gt;{
    &lt;span style=&#34;color:#50fa7b&#34;&gt;Read&lt;/span&gt;(p []&lt;span style=&#34;color:#8be9fd&#34;&gt;byte&lt;/span&gt;)(n &lt;span style=&#34;color:#8be9fd&#34;&gt;int&lt;/span&gt;,err &lt;span style=&#34;color:#8be9fd&#34;&gt;error&lt;/span&gt;)
}&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;code&gt;Read&lt;/code&gt;方法将&lt;code&gt;len(p)&lt;/code&gt;个字节读取到p中，返回值是读取的字节数和任何遇到的错误，这个错误可能是读取中遇到的意外或者EOF(end-of-file)。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;当&lt;code&gt;Read&lt;/code&gt;方法返回错误时，不代表没有读取到任何数据。&lt;strong&gt;调用者应该处理返回的任何数据，之后才处理可能的错误&lt;/strong&gt;。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;即使&lt;code&gt;Read&lt;/code&gt;函数返回的的字节数小于&lt;code&gt;p&lt;/code&gt;的长度，函数也会返回完整的p；如果读取的数据不到&lt;code&gt;p&lt;/code&gt;的最大长度，&lt;code&gt;Read&lt;/code&gt;方法会返回当前读取到的可用数据，不会继续等待读取。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;因为所有实现了&lt;code&gt;Read&lt;/code&gt;方法的类型都相当于实现了&lt;code&gt;io.Reader&lt;/code&gt;接口，也就是说，在所有需要&lt;code&gt;io.Reader&lt;/code&gt;的地方，可以传递实现了&lt;code&gt;Read()&lt;/code&gt;方法的类型的实例。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>Golang文本编码处理</title>
      <link>/golang/golang%E6%96%87%E6%9C%AC%E7%BC%96%E7%A0%81%E5%A4%84%E7%90%86/</link>
      <pubDate>Tue, 05 Sep 2017 22:43:02 +0800</pubDate>
      
      <guid>/golang/golang%E6%96%87%E6%9C%AC%E7%BC%96%E7%A0%81%E5%A4%84%E7%90%86/</guid>
      <description>1. strings库常见例子 1.1. strings.Contains()包含 1 2 3 4 5 6 7 8 9  import( &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; ) func main(){ str := &amp;#34;hello world&amp;#34; fmt.Println(strings.Contains(str,&amp;#34;hello&amp;#34;)) //输出 true  fmt.Println(strings.Contains(str,&amp;#34;?&amp;#34;)) //输出 false }   1.2. strings.Index()索引 1 2 3 4 5 6 7 8  import( &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; ) func main(){ str := &amp;#34;hello world&amp;#34; fmt.Println(strings.Index(str,&amp;#34;w&amp;#34;)) //输出 6 }   1.3. strings.Split()切割 1 2 3 4 5 6 7 8  import( &amp;#34;fmt&amp;#34; &amp;#34;strings&amp;#34; ) func main(){ str := &amp;#34;hello,world&amp;#34; fmt.</description>
    </item>
    
    <item>
      <title>Go语言标准库-fmt</title>
      <link>/golang/go%E6%A0%87%E5%87%86%E5%BA%93-fmt/</link>
      <pubDate>Wed, 23 Aug 2017 20:56:34 +0800</pubDate>
      
      <guid>/golang/go%E6%A0%87%E5%87%86%E5%BA%93-fmt/</guid>
      <description>1. fmt包  fmt包实现了类似c语言的printf和scanf函数，实现格式化I/O函数。  1.1. printf函数 1.1.1. 示例类型和变量 1 2 3 4 5 6 7  type Human struct{ Name string } func main(){ var people = Human{Name:&amp;#34;zhangsan&amp;#34;} }   1.1.2. 普通占位符    占位符 说明 举例 输出     %v 相应值的默认格式 Printf(&amp;quot;%v&amp;quot;,people) {zhangsan}   %+v 打印结构体时，会添加字段名显示 Printf(&amp;quot;%+v&amp;quot;,people) {Name:zhangsan}   %#v 相应值的Go语法表示 Printf(&amp;quot;%#v&amp;quot;,people) main.Human{Name:zhangsan}   %T 相应值*类型*的Go语法表示 Printf(&amp;quot;%T&amp;quot;,people) main.Human   %% 表示输出一个%(类似转义符) Printf(&amp;quot;%%&amp;quot;) %    1.</description>
    </item>
    
    <item>
      <title>Go语言基础知识</title>
      <link>/golang/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link>
      <pubDate>Fri, 11 Aug 2017 21:53:08 +0800</pubDate>
      
      <guid>/golang/go%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid>
      <description>1. 基础知识  每个go程序都是由package定义的。package必须在源文件的第一行。 每个可执行程序必须有且只有一个main包，main包里面必须有main函数。  1 2 3 4 5  package main // todo func main(){ //TODO }    import
 多个包可以一个一个import：   1 2 3  import &amp;#34;fmt&amp;#34; import &amp;#34;os&amp;#34; import &amp;#34;log&amp;#34;    也可以简化：  1 2 3 4 5 6 7 8 9  import ( &amp;#34;fmt&amp;#34; &amp;#34;os&amp;#34; &amp;#34;log&amp;#34; ) //调用 func main(){ fmt.Println(&amp;#34;hello world&amp;#34;); }    导入的包没有调用里面的函数等，就会导致编译失败。 可以设置别名：  1 2 3 4 5 6  import env &amp;#34;fmt&amp;#34; //调用 func main(){ env.</description>
    </item>
    
    <item>
      <title>Go命令操作工具</title>
      <link>/golang/go%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C%E5%B7%A5%E5%85%B7/</link>
      <pubDate>Wed, 09 Aug 2017 21:09:03 +0800</pubDate>
      
      <guid>/golang/go%E5%91%BD%E4%BB%A4%E6%93%8D%E4%BD%9C%E5%B7%A5%E5%85%B7/</guid>
      <description>1. 查看Go命令 可以在命令行中执行go命令来查看所有的go命令： 2. Go命令 2.1. go build 主要用来编译代码，在编译的过程中，可以同时编译代码中引用的其他包。
 对于普通包，执行go build后不会生成任何文件。(执行gi install可以在$GOPATH/pkg目录下生成对应的文件) 如果是main包，执行go build后，会在当前的目录下生成一个可执行文件。(使用go install或go build -o [path]/a.exe可以在$GOPATH/bin目录下生成相应的文件) go build默认会编译当前目录下的所有go文件；如果只想编译某一个文件，可以在go build之后加上文件名，例如：go build name.go。 使用go build -o namexx.exe可以指定编译输出的文件名；默认的名称有两种情况：如果当前不是main包，那么就是package名；如果是main包那么就是第一个源文件的文件名。 go build会忽略目录下以“_”或者“.”开头的文件。 如果需要针对不同的操作系统进行不同的处理，可以根据不同系统名称后缀来命名文件，例如有一个读取数组的程序，针对不同的操作系统的执行代码有差异的，那么就有这么几个源文件：array_linux.go、array_darwin.go、array_windows.go、array_freebsd.go，在不同的操作系统下编译会选择相应系统名结尾的文件，忽略其他文件。  2.1.1. 参数介绍  -o 指定输出的文件名，可以带路径输出：go build a/b/c/name.exe -n 把需要执行的编译命令打印出来，但是不执行，只输出。 -v 打印出正在编译的包名 -x 和-n相同，只是-x在打印的同时会执行编译  2.2. go clean 这个命令是用来删除掉当前包中编译生成的文件，只剩下源文件。
2.2.1. 参数介绍  -i 清除使用go install安装的文件(关联的安装包和可运行文件)。 -n 把需要执行清除命令打印出来，但是不执行。 -r 循环清除在import中引入的包。 -x 和-n一样，只不过在打印的同时会执行清除命令。  2.3. go fmt 这个命令可以格式化你源文件中的代码，消除源文件中的编码不规范。
2.3.1. 参数介绍  -l 列出需要格式化的文件。 -w 把格式化后的内容直接写入对应的源文件中。 -s 简化文件中的代码。 -d 打印格式化前后的内容对比，不写入文件，默认是false。 -e 打印所有的语法错误。如果没有这个参数，默认只会打印前10个错误。  2.</description>
    </item>
    
    <item>
      <title>GO环境安装部署</title>
      <link>/golang/go%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</link>
      <pubDate>Tue, 08 Aug 2017 21:50:58 +0800</pubDate>
      
      <guid>/golang/go%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E9%83%A8%E7%BD%B2/</guid>
      <description>&lt;h1 id=&#34;windows安装go&#34;&gt;Windows安装GO&lt;/h1&gt;

&lt;p&gt;官网下载&lt;a href=&#34;https://golang.org/dl/&#34;&gt;https://golang.org/dl/&lt;/a&gt;
  Golang中国下载&lt;a href=&#34;https://golangtc.com/download&#34;&gt;https://golangtc.com/download&lt;/a&gt;
直接安装即可。&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>